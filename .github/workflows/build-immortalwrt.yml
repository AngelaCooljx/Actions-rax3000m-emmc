#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ImmortalWrt

permissions: write-all
# 开启写权限，防止无法上传到release

on:
  repository_dispatch:
  schedule:
   - cron: 0 19 * * 0
   # 分,时,日,月,星期。每周日 19 时执行一次 (UTC时间)
  workflow_dispatch:
    inputs:
      USE_26MHZ:
        description: 'Use 26MHz max-frequency'
        required: true
        default: 'true'
        type: boolean

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  FREE_DISK_SH: scripts/free_disk_space.sh
  ENV_SH: scripts/environment.sh
  DIY_SH: scripts/diy.sh
  CLASH_CORE: scripts/preset-clash-core.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "USE_26MHZ=${{ github.event.inputs.USE_26MHZ }}" >> $GITHUB_ENV
        chmod +x $FREE_DISK_SH && $FREE_DISK_SH
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        chmod +x $ENV_SH && $ENV_SH
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 克隆源码
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 开启缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: 'openwrt23-cortexa53'
        prefix: ${{ github.workspace }}/openwrt

    - name: 更新 & 安装 feeds & 执行脚本
      run: |
        cd openwrt
        ./scripts/feeds update -a && ./scripts/feeds install -a        
        chmod +x $GITHUB_WORKSPACE/$DIY_SH && $GITHUB_WORKSPACE/$DIY_SH

    - name: 导入补丁和配置 & 下载文件
      run: |
        [ -e files ] && mv files openwrt/files
        cat configs/rax3000m-emmc.config >> openwrt/.config
        cd openwrt
        chmod +x $GITHUB_WORKSPACE/$CLASH_CORE && $GITHUB_WORKSPACE/$CLASH_CORE
        make defconfig
        make download -j8 V=10
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 设置 dts 闪存频率
      if: env.USE_26MHZ == 'false'
      run: |
        sed -i 's/26000000/52000000/g' openwrt/target/linux/mediatek/dts/mt7981b-cmcc-rax3000m-emmc-ubootmod.dts
        grep max-frequency openwrt/target/linux/mediatek/dts/mt7981b-cmcc-rax3000m-emmc-ubootmod.dts

    - name: 编译固件中
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *.buildinfo 
        rm -rf *.json 
        rm -rf *.manifest 
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        echo -e "✅ immortalwrt-23.05-SNAPSHOT-rax3000m-emmc-ubootmod" >> release.txt
        max_frequency=$(($(grep -oP "max-frequency = <\K[0-9]*" openwrt/target/linux/mediatek/dts/mt7981b-cmcc-rax3000m-emmc-ubootmod.dts) / 1000000))
        echo "使用闪存频率: ${max_frequency}MHz" >> release.txt
        echo "release_tag=$(date +"%Y.%m.%d-23.05-rax3000m-emmc-ubootmod-${max_frequency}MHz")" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧发布的固件
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 7
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 删除过时工作流程
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 3
